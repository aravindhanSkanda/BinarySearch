Medium

Given a binary tree root, return the depth of the second deepest leaf. Note that if there are multiple deepest leaves, the second deepest leaf is the next highest one.

The root has a depth of 0 and you can assume the answer is guaranteed to exist for the trees given.

Constraints

n â‰¤ 100,000 where n is the number of nodes in root.




import java.util.*;

/**
 * public class Tree {
 *   int val;
 *   Tree left;
 *   Tree right;
 * }
 */
class Solution {
    private static int depth=-1;
    private static int seconddepth=-1;

    public int solve(Tree root) {
        depth=-1;
        seconddepth=-1;
        calculate(root, 0);
        return seconddepth;
    }

    private void calculate(Tree root, int height)
    {
        if(root==null)
        {
            return;
        }
        if(root.left==null && root.right==null)
        {
            
            if(height>depth)
            {
                seconddepth=depth;
                depth=height;
            }
            else if(height>seconddepth)
            {
                
                if(height!=depth)
                {
                seconddepth=height;
                }
            }
            return;
        }
        
        calculate(root.left, height+1);
        calculate(root.right, height+1);


    }
}


TimeComplexity- O(n)
SpaceComplexity - O(1)
