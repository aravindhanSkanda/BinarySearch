/*
You are given a binary tree root and an integer target. Return the number of pairs of leaves such that the shortest distance between them is less than or equal to target.
*/

import java.util.*;

/**
 * public class Tree {
 *   int val;
 *   Tree left;
 *   Tree right;
 * }
 */

 
class Solution {
    private static int ans=0;

    public int solve(Tree root, int target) {
        ans=0;
        calculate(root, target);
        return ans;
    }

/** Method to calculate height of leaves nodes 
    Store them in HashMap 
    And then calculate whether the distance between left and right childs at each time is less than or equal to target and increment answer
**/
    private HashMap calculate(Tree root, int target)
    {
        if(root==null)
        {
            return new HashMap();
        }
        HashMap <Tree, Integer> i= new HashMap();
        HashMap <Tree, Integer> j= new HashMap();
        if(root.left!=null)
        {
         i=calculate(root.left, target);
        }
        if(root.right!=null)
        {
         j=calculate(root.right, target);
        }
         HashMap res=new HashMap();

        if(root.left!=null && root.right!=null)
        {
        for(int lef: i.values())
        {
            for(int right: j.values())
            {
                if(lef+right<=target)
                {
                    ans++;
                }
            }
        }
        }
        

    if(root.left!=null || root.right!=null)
    {
       for(Tree left:i.keySet())
        {
            res.put(left, i.get(left)+1);
        }
        for(Tree right:j.keySet())
        {
            res.put(right, j.get(right)+1);
        }
    }
    else
    {
        res.put(root,1);
    }   
        return res;
    }
}
