/*
You are given a binary tree root containing unique integers and integers target and radius. Return a sorted list of values of all nodes that are distance radius away from the node with value target.
*/



import java.util.*;

/**
 * public class Tree {
 *   int val;
 *   Tree left;
 *   Tree right;
 * }
 */
class Solution {
    private static ArrayList <Integer>list=null;
    public int[] solve(Tree root, int target, int radius) {
        list= new ArrayList();
       
            if(radius==0)
            {
                list.add(target);
            }
        else
        {
       calculate( root,  target,  radius);
        }

       int[] ans = list.stream().mapToInt(i->i).toArray();
       Arrays.sort(ans);
        return ans;
    }

    private Integer calculate(Tree root, int target, int radius)
    {
        if(root==null)
        {
            return -1;
        }
        
         if(root.val==target)
            {
                calculate1(root,0, radius);
                return 1;
            }
            else
            {
            int h=calculate(root.left, target, radius);
            int r=calculate(root.right, target, radius);
            if(h!=-1)
            {
                if(radius==h)
                {
                    list.add(root.val);
                    
                }
                if(radius-h-1>=0)
                    {
                    calculate1(root.right,0, radius-h-1);
                    }
                
                return h+1;
            }
            if(r!=-1)
            {
                if(radius==r)
                {
                    list.add(root.val);
                }
               
                if(radius-r-1>=0)
                    {
                    calculate1(root.left,0, radius-r-1);
                    }
                return r+1;
            }
            }
            return -1;
    }

    private void calculate1 (Tree root, int level, int radius)
    {
        if(root==null)
        {
            return;
        }
        if(level==radius)
        {
            list.add(root.val);
        }
        calculate1(root.left, level+1, radius);
        calculate1(root.right, level+1, radius);
    }
}
TimeComplexity O(nlogn)
Space Complexity O(n)
T
