/**

Medium

Given a binary tree root, invert it so that its left subtree and right subtree are swapped and the children are recursively inverted.

Constraints

n â‰¤ 100,000 where n is the number of nodes in root

**/

import java.util.*;

/**
 * public class Tree {
 *   int val;
 *   Tree left;
 *   Tree right;
 * }
 */
class Solution {
    public Tree solve(Tree root) {
        if(root==null)
        {
            return null;
        }
        solve(root.right);
        solve(root.left);
        Tree temp=root.left;
        root.left=root.right;
        root.right=temp;
        return root;
    }
}


Time complexity -O(n)-> n-is the number of nodes 
Space Complexity - O(1)
